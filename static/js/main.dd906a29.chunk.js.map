{"version":3,"sources":["components/Statistics/Statisctics.module.scss","components/FeedbackOptions/FeedbackOptions.module.scss","components/Section/Section.module.scss","components/Notification/Notification.module.scss","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Section/Section.jsx","App.jsx","index.js"],"names":["module","exports","Statisctics","good","neutral","bad","total","positivePercentage","className","styles","list","list__item","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","btn","Notification","message","Section","title","children","section","section__name","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Statistics","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,WAAa,kC,gBCAhED,EAAOC,QAAU,CAAC,KAAO,8BAA8B,WAAa,oCAAoC,IAAM,+B,kBCA9GD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,iC,iBCArED,EAAOC,QAAU,CAAC,QAAU,gC,2GC6BbC,EA1BK,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAChD,OACE,cAAC,WAAD,UACE,qBAAIC,UAAWC,IAAOC,KAAtB,UACE,qBAAIF,UAAWC,IAAOE,WAAtB,mBAAyCR,KACzC,qBAAIK,UAAWC,IAAOE,WAAtB,sBAA4CP,KAC5C,qBAAII,UAAWC,IAAOE,WAAtB,kBAAwCN,KACxC,qBAAIG,UAAWC,IAAOE,WAAtB,oBACUL,EAAMH,EAAMC,EAASC,MAE/B,qBAAIG,UAAWC,IAAOE,WAAtB,gCACsBJ,EAAmBJ,EAAMC,EAASC,Y,gBCcjDO,EAzBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAIN,UAAWC,IAAOC,KAAtB,SACGG,EAAQE,KAAI,SAAAC,GACX,OACE,oBAAiBR,UAAWC,IAAOE,WAAnC,SACE,wBACEM,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAC/BR,UAAWC,IAAOU,IAHpB,SAKGH,KANIA,S,gBCOJI,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,cAAC,WAAD,UACE,mBAAGb,UAAWC,IAAOY,QAArB,SAA+BA,O,gBCWtBC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,sBAAKhB,UAAWC,IAAOgB,QAAvB,UACE,oBAAIjB,UAAWC,IAAOiB,cAAtB,SAAsCH,IACrCC,MCcQ,SAASG,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgB0B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOvB,EAAP,KAAY0B,EAAZ,KAoBMC,EAAqB,SAAC7B,EAAMC,EAASC,GACzC,OAAOF,EAAOC,EAAUC,GAO1B,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAASkB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEV,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA7BgB,SAAAE,GACtB,OAAQA,GACN,IAAK,OACH,OAAOa,GAAQ,SAAA1B,GAAI,OAAIA,EAAO,KAEhC,IAAK,UACH,OAAO2B,GAAW,SAAA1B,GAAO,OAAIA,EAAU,KAEzC,IAAK,MACH,OAAO2B,GAAO,SAAA1B,GAAG,OAAIA,EAAM,KAE7B,QACE,aAoBF,cAAC,EAAD,CAASkB,MAAO,aAAhB,SACGS,EAAmB7B,EAAMC,EAASC,GAAO,EACxC,cAAC4B,EAAD,CACE9B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,EACPzB,mBAnB8B,SAACJ,EAAMC,EAASC,GACtD,OAAO6B,KAAKC,MAAM,MAAQhC,EAAOC,EAAUC,GAAOF,IAAS,OAqBrD,cAAC,EAAD,CAAckB,QAAS,2BCnEjCe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFY,SAASC,eAAe,W","file":"static/js/main.dd906a29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statisctics_list__bgpDL\",\"list__item\":\"Statisctics_list__item__2azLq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__3-Kfe\",\"list__item\":\"FeedbackOptions_list__item__12kQq\",\"btn\":\"FeedbackOptions_btn__2IQQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2mYr1\",\"section__name\":\"Section_section__name__Labqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__359yE\"};","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Statisctics.module.scss';\n\nconst Statisctics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <Fragment>\n      <ul className={styles.list}>\n        <li className={styles.list__item}>Good: {good}</li>\n        <li className={styles.list__item}>Neutral: {neutral}</li>\n        <li className={styles.list__item}>Bad: {bad}</li>\n        <li className={styles.list__item}>\n          Total: {total(good, neutral, bad)}\n        </li>\n        <li className={styles.list__item}>\n          Positive feedback: {positivePercentage(good, neutral, bad)}\n        </li>\n      </ul>\n    </Fragment>\n  );\n};\n\nStatisctics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\n\nexport default Statisctics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FeedbackOptions.module.scss';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className={styles.list}>\n      {options.map(option => {\n        return (\n          <li key={option} className={styles.list__item}>\n            <button\n              type=\"button\"\n              onClick={() => onLeaveFeedback(option)}\n              className={styles.btn}\n            >\n              {option}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Notification.module.scss';\n\nconst Notification = ({ message }) => {\n  return (\n    <Fragment>\n      <p className={styles.message}>{message}</p>\n    </Fragment>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.scss';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={styles.section}>\n      <h2 className={styles.section__name}>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React, { Fragment, useState } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Section from './components/Section';\n\n// function commentsReducer(commentCount, action) {\n//   switch (action.type) {\n//     case 'good':\n//       return commentCount + action.payload\n\n//     case 'neutral':\n//       return commentCount + action.payload\n\n//     case 'bad':\n//       return commentCount + action.payload\n\n//     default:\n//       return commentCount;\n//   }\n// }\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  // const options = { good, neutral, bad };\n\n  const onLeaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        return setGood(good => good + 1);\n\n      case 'neutral':\n        return setNeutral(neutral => neutral + 1);\n\n      case 'bad':\n        return setBad(bad => bad + 1);\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = (good, neutral, bad) => {\n    return Math.round(100 / ((good + neutral + bad) / good)) + '%';\n  };\n\n  return (\n    <Fragment>\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      <Section title={'Statistics'}>\n        {countTotalFeedback(good, neutral, bad) > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <Notification message={'No feedback given'} />\n        )}\n      </Section>\n    </Fragment>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback = () => {\n//     return this.state.good + this.state.neutral + this.state.bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     return (\n//       Math.round(\n//         100 /\n//           ((this.state.good + this.state.neutral + this.state.bad) /\n//             this.state.good),\n//       ) + '%'\n//     );\n//   };\n\n//   onLeaveFeedback = option => {\n//     this.setState(prevState => ({\n//       [option]: prevState[option] + 1,\n//     }));\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n\n//     return (\n//       <Fragment>\n//         <Section title={'Please leave feedback'}>\n//           <FeedbackOptions\n//             options={['good', 'neutral', 'bad']}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n//         <Section title={'Statistics'}>\n//           {this.countTotalFeedback() > 0 ? (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             />\n//           ) : (\n//             <Notification message={'No feedback given'} />\n//           )}\n//         </Section>\n//       </Fragment>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}